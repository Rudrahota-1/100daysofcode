Q)-Maximum Triplet product
Given an array arr of size n, the task is to find the maximum triplet product in the array.


Example 1:

Input:
n = 4
arr[] = {1, 2, 3, 5}
Output:
30
Explanation:
5*3*2 gives 30. This is the maximum possible
triplet product in the array.
Example 2:

Input:
n = 7
arr[] = {-3, -5, 1, 0, 8, 3, -2} 
Output:
120
Explanation: 
-3*-5*8 gives 120. This is the maximum possible triplet product in the array.

Your Task:
You don't need to read input or print anything. Your task is to complete the function maxTripletProduct() which takes an integer n and an array arr and returns the maximum triplet product in the array.


Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)


Constraints:
3 ≤ N ≤ 5*105
-106 ≤ A[i] ≤ 106

Ans)-
#Back-end complete function Template for Python 3

class Solution:
    def maxTripletProduct (self, arr,  n): 
        # Initialize Maximum, second
        # maximum and third maximum
        # element
        maxA = -sys.maxsize - 1
        maxB = -sys.maxsize - 1
        maxC = -sys.maxsize - 1
     
        # Initialize Minimum and
        # second mimimum element
        minA = sys.maxsize
        minB = sys.maxsize
     
        for i in range(n):
     
            # Update Maximum, second
            # maximum and third maximum
            # element
            if (arr[i] > maxA):
                maxC = maxB
                maxB = maxA
                maxA = arr[i]
                 
            # Update second maximum and
            # third maximum element
            elif (arr[i] > maxB):
                maxC = maxB
                maxB = arr[i]
                 
            # Update third maximum element
            elif (arr[i] > maxC):
                maxC = arr[i]
     
            # Update Minimum and second
            # mimimum element
            if (arr[i] < minA):
                minB = minA
                minA = arr[i]
     
            # Update second mimimum element
            elif (arr[i] < minB):
                minB = arr[i]
     
        return max(minA * minB * maxA,
                   maxA * maxB * maxC)
                   
                   
