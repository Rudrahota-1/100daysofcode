Q)-Find the longest string
Given an array of strings arr[]. You have to find the longest string which is lexicographically smallest and also all of its prefix strings are already present in the array.

 

Example 1:

Input: ab a abc abd
Output: abc
Explanation: We can see that length of the longest 
string is 3. And there are two string "abc" and "abd"
of length 3. But for string "abc" , all of its prefix
"a" "ab" "abc" are present in the array. So the
output is "abc".
Example 2:

Input: ab a aa abd abc abda abdd abde abdab
Output: abdab
Explanation: We can see that each string is fulfilling
the condition. For each string, all of its prefix 
are present in the array.And "abdab" is the longest
string among them. So the ouput is "abdab".
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function longestString() which takes the array arr[] as input parameter and returns the longest string which is also lexicographically smallest.And if there is no such string return empty string.
 

Expected Time Complexity: O(NlogN)
Expected Space Complexity: O(N)

 

Constraints:
1 <= length of arr[] <= 103
1 <= arr[i].length <=30



Answer)-
#User function Template for python3


class TrieNode:
    def __init__(self):
        self.children = [None for i in range(26)]
        self.isWord = False
class Trie:
    def __init__(self):
        self.Tree = TrieNode()
    def insert(self, s):
        cur = self.Tree
        prev = None
        for i in s:
            if cur.children[self.index(i)] is None:
                cur.children[self.index(i)] = TrieNode()
            prev = cur
            cur = cur.children[self.index(i)]
        cur.isWord =True
    
    def contains(self, s):
        cur = self.Tree
        cur.isWord=True
        prev = None
        for i in s:
            if cur.children[self.index(i)] is None or cur.isWord == False:
                return False
            prev = cur
            cur = cur.children[self.index(i)] 
        return True

    def index(self, char):
        return ord(char) - ord("a")

class Solution():
    def longestString(self, arr, n):
        trie = Trie()
        for s in arr:
            trie.insert(s)
        ans = ""
        
        for s in arr:
            if trie.contains(s):
                if len(s)>len(ans):
                    ans = s
                elif len(s) == len(ans):
                    ans = min(ans, s)
        return ans
        }
        
