Q)-Carpet into Box
There is a carpet of a size a*b [length * breadth]. You are given a box of size c*d. The task is, one has to fit the carpet in the box in a minimum number of moves. 

In one move, you can either decrease the length or the breath of the carpet by half (floor value of its half).

Note: One can even turn the carpet by 90 degrees any number of times, wont be counted as a move.

 

Example 1:

Input:
A = 8, B = 13
C = 6, D = 10
Output:
Minimum number of moves: 1
Explanation:
Fold the carpet by breadth, 13/2 i.e. 6, 
so now carpet is 6*8 and can fit fine.
 

Example 2:

Input:
A = 4, B = 8
C = 3, D = 10
Output:
Minimum number of moves: 1
Explanation: Fold the carpet by length , 4/2 i.e. 2,
so now carpet is 2*8 and can fit fine.
 

Your Task:
You don't need to read input or print anything. You only need to complete the function carpetBox() that takes an integer A, B, C and D as input and returns an integer denoting the minimum numbers of moves required to fit the carpet into the box.

 

Expected Time Complexity: O( max( log(a), log(b) ) ) .
Expected Auxiliary Space: O(1) .

 

Constrains:
1<= A,B,C,D <= 109

Ans)-
class Solution:
    def carpetBox(self, A,B,C,D):
        dp = dict()
        return self.solve(A,B,C,D,dp)
        
    def solve(self,a,b,c,d,dp):
        if (a,b) in dp:
            return dp[(a,b)]
            
        if max(a,b) <= max(c,d) and min(a,b) <= min(c,d):
            return 0
        x =10**9
        y = 10**9
        z = 10**9
        if min(a,b) < max(c,d):
            if a <= c or a <= d:
                x = self.solve(a,b//2,c,d,dp)+1
            if b<=c or b<=d:
                y = self.solve(a//2,b,c,d,dp)+1
        else:
            z = min(self.solve(a//2,b,c,d,dp),self.solve(a,b//2,c,d,dp)) + 1
        dp[(a,b)] = min(x,y,z)
        return dp[(a,b)]
        

