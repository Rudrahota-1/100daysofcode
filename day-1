Zero Sum Subarrays

You are given an array arr[] of size n. Find the total count of sub-arrays having their sum equal to 0.


Example 1:

Input:
n = 6
arr[] = {0,0,5,5,0,0}
Output: 6
Explanation: The 6 subarrays are 
[0], [0], [0], [0], [0,0], and [0,0].

Example 2:

Input:
n = 10
arr[] = {6,-1,-3,4,-2,2,4,6,-12,-7}
Output: 4
Explanation: The 4 subarrays are [-1 -3 4]
[-2 2], [2 4 6 -12], and [-1 -3 4 -2 2]

Your Task:
You don't need to read input or print anything. Complete the function findSubarray() that takes the array arr and its size n as input parameters and returns the total number of sub-arrays with 0 sum. 
 

Expected Time Complexity: O(n*log(n))
Expected Auxilliary Space: O(n)
 

Constraints:    
1 <= n <= 10^6
-10^9 <= arr[ i ] <= 10^9











ANSWER:


#Back-end complete function Template for Python 3

class Solution:
    #Function to count subarrays with sum equal to 0.
    def findSubArrays(self,arr,n):
      
        c=0
        hashMap = {} 
        out = [] 
        sum1 = 0
        
        #iterating over the array.
        for i in range(n):
            #storing prefix sum.
            sum1 += arr[i] 
            
            #if prefix sum is zero that means we get a subarray with sum=0.  
            if sum1 == 0: 
                out.append((0, i))
                #incrementing the counter.
                c+=1
            al = [] 
            
            #if prefix sum is already present in map then it is repeated 
            #which means there is a subarray whose summation is 0.
            if sum1 in hashMap: 
                  
                al = hashMap.get(sum1) 
                for it in range(len(al)): 
                    out.append((al[it] + 1, i))
                    #incrementing the counter.
                    c+=1
                    
            al.append(i) 
            #storing the count of prefix sum obtained in map.
            hashMap[sum1] = al 
            
        #returning the counter.    
        return c


